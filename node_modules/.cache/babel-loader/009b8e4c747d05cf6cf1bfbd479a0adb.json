{"ast":null,"code":"var _jsxFileName = \"/home/gustavo/q2/gestao3/capstone-q2-educ-financeira-g4/src/Providers/Modal/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ModalContext = /*#__PURE__*/createContext({});\nexport const ModalProvider = ({\n  children\n}) => {\n  _s();\n\n  const [isOpen, setIsOpen] = useState(false);\n\n  const handleModal = children => {\n    setIsOpen(!isOpen);\n  };\n\n  return /*#__PURE__*/_jsxDEV(ModalContext.Provider, {\n    value: {\n      handleModal,\n      isOpen\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ModalProvider, \"wI4RD8C1tVsUvnhO13IbxY3XhiQ=\");\n\n_c = ModalProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModalProvider\");","map":{"version":3,"sources":["/home/gustavo/q2/gestao3/capstone-q2-educ-financeira-g4/src/Providers/Modal/index.tsx"],"names":["createContext","useState","ModalContext","ModalProvider","children","isOpen","setIsOpen","handleModal"],"mappings":";;;AAAA,SAASA,aAAT,EAAoCC,QAApC,QAAoD,OAApD;;AAqBA,OAAO,MAAMC,YAAY,gBAAGF,aAAa,CAAqB,EAArB,CAAlC;AAEP,OAAO,MAAMG,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAqC;AAAA;;AAC9D,QAAM,CAAEC,MAAF,EAAUC,SAAV,IAAwBL,QAAQ,CAAC,KAAD,CAAtC;;AACA,QAAMM,WAAW,GAAIH,QAAD,IAAsB;AACtCE,IAAAA,SAAS,CAAC,CAACD,MAAF,CAAT;AACH,GAFD;;AAGA,sBACI,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAAEE,MAAAA,WAAF;AAAeF,MAAAA;AAAf,KAA9B;AAAA,cACMD;AADN;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAVM;;GAAMD,a;;KAAAA,a","sourcesContent":["import { createContext, ReactNode,  useState } from \"react\";\n\ninterface ModalProviderProps{\n    children:ReactNode\n}\ninterface ModalProviderData{\n    handleModal : (children?:Children) => void,\n    \n    isOpen: boolean\n}\ninterface Children{\n    balance:[],\n    email:string,\n    id:number,\n    parentId:number,\n    wallet:number,\n    wishlist:[],\n    name:string,\n    type: string\n}\n\nexport const ModalContext = createContext <ModalProviderData>({} as ModalProviderData)\n\nexport const ModalProvider = ({ children }: ModalProviderProps) =>{\n    const [ isOpen, setIsOpen ] = useState(false)\n    const handleModal = (children:Children) =>{\n        setIsOpen(!isOpen)\n    }\n    return(\n        <ModalContext.Provider value={{ handleModal, isOpen }}>\n            { children }\n        </ModalContext.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}